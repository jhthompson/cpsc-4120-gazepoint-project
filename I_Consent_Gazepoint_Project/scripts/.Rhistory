getOption("repos")
options(repos = c(CRAN = "https://cran.rstudio.com"))
install.packages(c("backports", "caTools", "digest", "glue", "markdown", "mime", "Rcpp", "stringi", "yaml"))
library(ggplot2)
rm(list = ls())
library(ggplot2)
library(ggplot2)
data <- read.csv("combined_tweets.csv")
getwd()
switch_wd
install.packages('devtools')
devtools::install_github('fawda123/rStrava')
athl_fun(2837007, trace = FALSE)
CMD INSTALL
install.packages(rStrava)
install.packages(rstrahelp.search('notoken', package = 'rStrava'))
help.search('notoken', package = 'rStrava')
?athl_fun
library(rStrava)
athl_fun(2837007, trace = FALSE)
athl_fun(7780234, trace = FALSE)
athl_fun(21953458, trace=FALSE)
test <- 21953458
test <- athl_fun(21953458, trace=FALSE)
View(test)
library(ISLR)
attach(Default)
summary(Default)
set.seed(42)
N <- nrow(Default)
train <- sample(N, N/2)
glm.fit <- glm(default ~ balance + income, family=binomial, subset=train)
pred.probs <- predict(glm.fit, Default[-train], type="response")
View(pred.probs)
pred.default <- rep("No", N/2)
pred.default[pred.probs > 0.5] <- "Yes"
error.rate <- mean(pred.default != default[-train])
error.rate
library(ISLR)
attach(Default)
summary(Default)
set.seed(42)
N <- nrow(Default)
train <- sample(N, N/2)
glm.fit <- glm(default ~ balance + income, family=binomial, subset=train)
pred.probs <- predict(glm.fit, Default[-train], type="response")
View(pred.probs)
pred.default <- rep("No", N/2)
library(ISLR)
attach(Default)
summary(Default)
set.seed(42)
library(ISLR)
attach(Default)
summary(Default)
set.seed(42)
N <- nrow(Default)
train <- sample(N, N/2)
glm.fit <- glm(default ~ balance + income, family = binomial, subset = train)
pred.probs <- predict(glm.fit, Default[-train], type="response")
pred.default <- rep("No", N/2)
pred.default[pred.probs > 0.5] <- "Yes"
error.rate <- mean(pred.default != default[-train])
error.rate
pred.deault
pred.default
summary(pred.defaultault)
summary(pred.default)
train <- sample(N, N / 2)
pred.default <- rep("No", N / 2)
pred.default[pred.probs > 0.5] <- "Yes"
error.rate <- mean(pred.default != default[-train])
error.rate
library(ISLR)
attach(Default)
library(ISLR)
attach(Default)
summary(Default)
set.seed(42)
N <- nrow(Default)
train <- sample(N, N / 2)
glm.fit <- glm(default ~ balance + income, family = binomial, subset = train)
pred.probs <- predict(glm.fit, Default[-train], type="response")
pred.default <- rep("No", N / 2)
pred.default[pred.probs > 0.5] <- "Yes"
error.rate <- mean(pred.default != default[-train])
error.rate <- mean(pred.default != default[-train])
library(ISLR)
attach(Default)
summary(Default)
set.seed(42)
N <- nrow(Default)
?sample
train <- sample(N, N/2)
glm.fit <- glm(default ~ balance + income, family = binomial, subset = train)
summary(glm)
summary(glm.fit)
pred.probs <- predict(glm.fit, Default[-train], type="response")
pred.default <- rep("No", N/2)
pred.default[pred.probs > 0.5] <- "Yes"
error.rate <- mean(pred.default != default[-train])
pred.default[pred.probs > 0.9] <- "Yes"
error.rate <- mean(pred.default != default[-train])
error.rate
error.rate <- mean(pred.default != default)
error.rate
library(ISLR)
attach(Default)
summary(Default)
set.seed(42)
N <- nrow(Default)
train <- sample(N, N/2)
glm.fit <- glm(default ~ balance + income, family = binomial, subset = train)
pred.probs <- predict(glm.fit, Default[-train], type="response")
pred.default <- rep("No", N/2)
pred.default[pred.probs > 0.5] <- "Yes"
error.rate <- mean(pred.default != pred.default[-train])
library(ISLR)
attach(Default)
summary(Default)
set.seed(42)
N <- nrow(Default)
train <- sample(N, N/2)
glm.fit <- glm(default ~ balance + income, family = binomial, subset = train)
View(Default)
View(Default[-train,1])
# View(Default)
# View(Default[-train,1]) # means only select rows that are NOT in the training set, and the
# comma *IMPORTANT* indicates to select all columns
pred.probs <- predict(glm.fit, Default[-train,0,2:3], type="response")
# View(Default)
# View(Default[-train,1]) # means only select rows that are NOT in the training set, and the
# comma *IMPORTANT* indicates to select all columns
pred.probs <- predict(glm.fit, Default[-train,], type="response")
# View(Default)
# View(Default[-train,1]) # means only select rows that are NOT in the training set, and the
# comma *IMPORTANT* indicates to select all columns
pred.probs <- predict(glm.fit, Default[-train,c(1,3,4)], type="response")
# View(Default)
# View(Default[-train,1]) # means only select rows that are NOT in the training set, and the
# comma *IMPORTANT* indicates to select all columns
# same thing as c(1,3,4), which leaves out the student column, since we didn't use that to
# train the model at all
pred.probs1 <- predict(glm.fit, Default[-train,c(1,3,4)], type="response")
pred.probs <- predict(glm.fit, Default[-train,], type="response")
pred.probs == pred.probs1
?eq
?equal
summary(pred.probs)
summary(pred.probs1)
library(boot)
?cv.glm
?abs
# train model on all data
glm.fit <- glm(default ~ balance + income, family=binomial)
my.cost <- function(r, pi = 0) {
mean(abs(r-pi) > 0.5)
}
# train model on all data
glm.fit <- glm(default ~ balance + income, family=binomial)
?cv.glm
cv.error.10 <- cv.glm(Default, glm.fit, my.cost, K=10)
cv.error.10$delta
file.path(R.home("bin"), "R")
library(sciplot)
library(ez)
library(psych)
library(reshape)
library(ggplot2)
source("lrheatmap.R") # load custom functions
setwd("~/GitHub/cpsc-4120-gazepoint-project/I_Consent_Gazepoint_Project/scripts")
library(sciplot)
library(ez)
library(psych)
library(reshape)
library(ggplot2)
source("lrheatmap.R") # load custom functions
source("TMSP.R") # load custom functions
args <- commandArgs(trailingOnly = TRUE)
xtiles <- 4#as.integer(args[1])
ytiles <- 2#as.integer(args[2])
rm(list-ls())
rm(list=ls())
library(sciplot)
library(ez)
library(psych)
library(reshape)
library(ggplot2)
source("lrheatmap.R") # load custom functions
source("TMSP.R") # load custom functions
args <- commandArgs(trailingOnly = TRUE)
xtiles <- 4#as.integer(args[1])
ytiles <- 2#as.integer(args[2])
print(sprintf("xtiles = %d, ytiles = %d\n",xtiles,ytiles))
M <- zeroTM(xtiles,ytiles)
df <- read.csv("aois.csv") # open data
ddf <- df[which(df$cond == "calib-verif"), ] # select condition
ddf
M_p1 <- TransMatrix(M,data=ddf,
AOInamesVar="AOI",
SubjectsVar="subj",
FixOrderVar="order")
View(M)
